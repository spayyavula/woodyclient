#!/bin/bash

# Android Development Environment Setup Script
# This script installs and configures the Android NDK and Rust toolchain for Android development

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create directories
mkdir -p $HOME/android
mkdir -p $HOME/.cargo

# Install Android NDK
install_android_ndk() {
    log_info "Installing Android NDK r25c..."
    
    # Create directory for NDK
    mkdir -p $HOME/android/ndk
    cd $HOME/android
    
    # Download NDK
    log_info "Downloading Android NDK r25c (this may take a while)..."
    curl -L https://dl.google.com/android/repository/android-ndk-r25c-linux-x86_64.zip -o ndk.zip
    
    # Extract NDK
    log_info "Extracting Android NDK..."
    unzip -q ndk.zip
    mv android-ndk-r25c ndk/r25c
    rm ndk.zip
    
    log_success "Android NDK r25c installed at $HOME/android/ndk/r25c"
}

# Configure Rust for Android
configure_rust_android() {
    log_info "Configuring Rust for Android development..."
    
    # Add Android targets to Rust
    log_info "Adding Android targets to Rust toolchain..."
    rustup target add aarch64-linux-android
    rustup target add armv7-linux-androideabi
    rustup target add i686-linux-android
    rustup target add x86_64-linux-android
    
    # Create Cargo config for Android
    log_info "Creating Cargo configuration for Android..."
    mkdir -p $HOME/.cargo
    
    cat > $HOME/.cargo/config.toml << EOF
[target.aarch64-linux-android]
linker = "$HOME/android/ndk/r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"

[target.armv7-linux-androideabi]
linker = "$HOME/android/ndk/r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"

[target.i686-linux-android]
linker = "$HOME/android/ndk/r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"

[target.x86_64-linux-android]
linker = "$HOME/android/ndk/r25c/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
EOF
    
    log_success "Rust configured for Android development"
}

# Set up environment variables
setup_environment_variables() {
    log_info "Setting up environment variables..."
    
    # Create .env.android file
    cat > .env.android << EOF
# Android Development Environment Variables
# Generated by setup-android-env.sh

# Android NDK
export ANDROID_NDK_ROOT=$HOME/android/ndk/r25c
export ANDROID_NDK_HOME=$HOME/android/ndk/r25c
export PATH=\$PATH:\$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin

# Android SDK (if available)
export ANDROID_HOME=$HOME/android/sdk
export ANDROID_SDK_ROOT=$HOME/android/sdk
export PATH=\$PATH:\$ANDROID_HOME/tools:\$ANDROID_HOME/tools/bin:\$ANDROID_HOME/platform-tools

# Rust Android targets
export RUST_ANDROID_GRADLE_LINKER_WRAPPER_PY=$HOME/android/ndk/r25c/build/tools/rust-android-gradle/rust-android-gradle-linker-wrapper.py
export RUST_ANDROID_GRADLE_TARGET=aarch64-linux-android
EOF
    
    # Source the environment variables
    source .env.android
    
    # Add to .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        log_info "Adding environment variables to .bashrc..."
        echo "" >> $HOME/.bashrc
        echo "# Android Development Environment" >> $HOME/.bashrc
        echo "if [ -f \"$PWD/.env.android\" ]; then" >> $HOME/.bashrc
        echo "    source \"$PWD/.env.android\"" >> $HOME/.bashrc
        echo "fi" >> $HOME/.bashrc
    fi
    
    log_success "Environment variables configured"
}

# Verify installation
verify_installation() {
    log_info "Verifying installation..."
    
    # Check NDK
    if [ -d "$HOME/android/ndk/r25c" ]; then
        log_success "Android NDK found at $HOME/android/ndk/r25c"
    else
        log_error "Android NDK installation failed"
        exit 1
    fi
    
    # Check Rust targets
    if rustup target list | grep -q "aarch64-linux-android"; then
        log_success "Rust Android targets installed"
    else
        log_error "Rust Android targets installation failed"
        exit 1
    fi
    
    # Check environment variables
    if [ -n "$ANDROID_NDK_ROOT" ]; then
        log_success "Environment variables set correctly"
    else
        log_warning "Environment variables not set in current session"
        log_info "Run 'source .env.android' to set them"
    fi
    
    log_success "Installation verified successfully"
}

# Create test project
create_test_project() {
    log_info "Creating test project to verify setup..."
    
    # Create a simple Rust library
    mkdir -p android-test/src
    
    cat > android-test/Cargo.toml << EOF
[package]
name = "android-test"
version = "0.1.0"
edition = "2021"

[lib]
name = "android_test"
crate-type = ["staticlib", "cdylib"]

[dependencies]
jni = "0.19.0"
EOF
    
    cat > android-test/src/lib.rs << EOF
use jni::JNIEnv;
use jni::objects::{JClass, JString};
use jni::sys::jstring;

#[no_mangle]
pub extern "C" fn Java_com_example_androidtest_MainActivity_stringFromRust(
    env: JNIEnv,
    _: JClass,
    input: JString,
) -> jstring {
    // Convert Java string to Rust string
    let input: String = env.get_string(input).expect("Couldn't get Java string!").into();
    
    // Create output string
    let output = format!("Hello from Rust! You said: {}", input);
    
    // Convert Rust string back to Java string
    env.new_string(output)
        .expect("Couldn't create Java string!")
        .into_inner()
}
EOF
    
    log_success "Test project created at android-test/"
    log_info "To test the setup, run:"
    log_info "cd android-test && cargo build --target aarch64-linux-android --release"
}

# Main function
main() {
    log_info "Starting Android development environment setup..."
    
    # Check if Rust is installed
    if ! command -v rustup &> /dev/null; then
        log_error "Rust not found. Please install Rust first."
        log_info "Run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"
        exit 1
    fi
    
    # Install Android NDK
    install_android_ndk
    
    # Configure Rust for Android
    configure_rust_android
    
    # Set up environment variables
    setup_environment_variables
    
    # Verify installation
    verify_installation
    
    # Create test project
    create_test_project
    
    log_info "Setup complete! You can now build Android apps with Rust."
    log_info "To use the environment in a new terminal, run: source .env.android"
}

# Run main function
main